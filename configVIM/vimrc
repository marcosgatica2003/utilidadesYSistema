call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-commentary'
Plug 'ycm-core/YouCompleteMe', {'do': './install.py'}
Plug 'lervag/vimtex'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'preservim/nerdtree'
Plug 'dense-analysis/ale'
Plug 'preservim/tagbar'

call plug#end()

colorscheme slate

syntax enable

filetype plugin indent on

set completeopt=menu,menuone,noselect
set termguicolors
set history=500
set encoding=utf-8
set scrolloff=8
set list listchars=tab:»·,trail:·
set foldmethod=syntax
set foldlevel=0
set cursorline
set backspace=2
set vb t_vb=
set autoread
set incsearch
set clipboard=unnamedplus
"set ttyfast
set lazyredraw
" set number
set updatetime=300
set mouse=
set laststatus=4
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

"let g:indent_guides_auto_colors = 0
let g:Tex_ViewRule_pdf = 'zathura'
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_FormatDependency_pdf = 'dvi,pdf'
let g:Tex_MultipleCompileFormats='pdf,bib,pdf'
let g:Tex_CompileRule_dvi = 'latex -shell-escape -interaction=nonstopmode -file-line-error $*.tex'
let g:Tex_CompileRule_pdf = 'dvipdf $*.dvi tmplatexsuite.pdf; mv tmplatexsuite.pdf $*.pdf'
" Configuración de UltiSnips
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDAltDelims_java = 1
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let &t_ut=''
let g:ycm_language_server = [
  \ { 'name': 'cpp', 'cmdline': ['clangd'], 'filetypes': ['cpp', 'c'] }
\]

let g:loaded_python_provider = 1
let g:loaded_python3_provider = 1
let g:ycm_autocall = 0
let g:ycm_show_status = 0
let g:ycm_use_lsp = 1
let g:ycm_server_keep_logfiles = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_add_preview_to_completeopt = 0

let g:ycm_show_diagnostics_ui = 0
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ale_linters = {
\   'cpp': ['gcc'],
\}

let g:ale_cpp_gcc_executable = 'g++'
let g:ale_cpp_gcc_options = '-std=c++17 -Wall -Wextra -pedantic'

let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
let g:ale_set_statusline = 1
let g:ale_set_highlights = 1
let g:ale_virtualtext_cursor = 1

let g:ale_fixers = {
\   'cpp': ['remove_trailing_lines', 'trim_whitespace'],
\}

let g:lightline = {
\   'colorscheme': 'one',
\   'active': {
\       'left': [ ['mode', 'paste'], ['readonly', 'filename', 'modified'] ]
\   }
\}


map <F8> :set number!<CR>
map <C-h> :tabprevious<CR>
map <C-l> :tabnext<CR>
nnoremap <F8> :TagbarToggle<CR>
nmap <leader>f :YcmCompleter Format<CR>

""Plantillas
autocmd BufNewFile *.c,*.h 0r ~/.vim/templates/template.c
autocmd BufNewFile *.cpp,*.hpp 0r ~/.vim/templates/template.cpp
autocmd BufNewFile *.ino 0r ~/.vim/templates/template.ino
autocmd BufNewFile *.tex 0r ~/.vim/templates/template.tex
autocmd BufNewFile *.h 0r ~/.vim/templates/template.h
autocmd FileType tex setlocal spell spelllang=es
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=blue   ctermbg=234
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green  ctermbg=234
autocmd Syntax tex,c,cpp,vim,xml,html,xhtml setlocal foldmethod=syntax
autocmd Syntax tex,c,cpp,vim,xml,html,xhtml,perl normal zR

autocmd FileType tex let g:ycm_auto_start = 0
autocmd FileType tex let g:coc_enabled = 1

autocmd FileType c,cpp,javascript,python,java let g:coc_enabled = 0
autocmd FileType c,cpp,javascript,python,java let g:ycm_auto_start = 1

inoremap ( ()<Left>
inoremap { {}<Left>
inoremap [ []<Left>

inoremap ' ''<Left>
inoremap " ""<Left>

highlight Type cterm=italic gui=italic
highlight Function cterm=italic gui=italic
highlight Constant cterm=bold gui=bold
highlight Normal ctermbg=NONE guibg =#131313
highlight texStatement guifg=#FF5733 gui=bold
highlight texCmdPart guifg=#C70039 gui=italic
highlight String guifg=#FFA07A gui=italic


